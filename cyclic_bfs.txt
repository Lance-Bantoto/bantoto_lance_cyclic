#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

vector<vector<int>> adj = {
    {0, 1, 1},
    {1, 0, 1},
    {1, 1, 0}
};

int n = adj.size();

void detectCycleBFS() {
    vector<int> visited(n, 0), parent(n, -1);

    for (int start = 0; start < n; start++) {
        if (!visited[start]) {
            queue<int> q;
            visited[start] = 1;
            q.push(start);

            while (!q.empty()) {
                int u = q.front(); q.pop();

                for (int v = 0; v < n; v++) {
                    if (adj[u][v]) {
                        if (!visited[v]) {
                            visited[v] = 1;
                            parent[v] = u;
                            q.push(v);
                        } else if (v != parent[u]) {
                            // Found a cycle
                            vector<int> path;
                            path.push_back(v);
                            for (int cur = u; cur != v && cur != -1; cur = parent[cur])
                                path.push_back(cur);
                            path.push_back(v);
                            reverse(path.begin(), path.end());

                            cout << "(BFS) Cycle found: ";
                            for (int node : path) cout << node << " ";
                            cout << endl;
                            return;
                        }
                    }
                }
            }
        }
    }

    cout << "(BFS) No cycle found" << endl;
}

int main() {
    cout << "Adjacency Matrix (3x3):" << endl;
    for (auto row : adj) {
        for (int x : row) cout << x << " ";
        cout << endl;
    }

    detectCycleBFS();
    return 0;
}
